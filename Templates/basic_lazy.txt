vll t(4*N);
vll a(N);
void build(ll u,ll l,ll r)
{
        if(l == r)
                t[u] = a[l];    
        else
        {
                ll m = l + (r-l)/2;
                build(2*u,l,m);
                build(2*u+1,m+1,r);
                t[u] = 0; 
        }
}
ll get(ll u,ll l,ll r,ll pos)
{
        if(l == r)
                return t[u];
        ll m = l + (r-l)/2;
        if(m >= pos)
                return t[u] + get(2*u,l,m,pos);
        else
                return t[u] + get(2*u+1,m+1,r,pos);
}
 
void update(ll u,ll l,ll r,ll ql,ll qr,ll val)
{
        if(l > r or ql > r or qr < l)
                return;
        if(l == ql and r == qr)
                t[u] += val;
        else
        {
                ll m = l + (r-l)/2;
                update(2*u,l,m,ql,min(qr,m),val);
                update(2*u+1,m+1,r,max(ql,m+1),qr,val);
        }
}