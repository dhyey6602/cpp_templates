struct segTree
{
    vector< int > t;
    int n;
    segTree(int sz)
    {
        n = sz;
        t.resize(4*n, 0);
    }
    ll merge(ll left,ll right)
    {
        ll ans = max(left , right);
        return ans;
    }
    void build(ll v,ll tl,ll tr)
    {
        if(tl==tr)
        {
            t[v] = a[tl];
        }
        else
        {
            ll tm = (tl + tr)/2;
            build(2*v,tl,tm);
            build(2*v+1,tm+1,tr);
            t[v] = merge(t[2*v],t[2*v+1]);
        }
    }
    void update(ll v,ll tl,ll tr,ll pos,ll new_val)
    {
        if(tl==tr)  
        {
            t[v] = new_val;
        }
        else
        {
            ll tm = (tl + tr)/2;
            if(pos<=tm)
            {
                update(2*v,tl,tm,pos,new_val);
            }
            else
            {
                update(2*v+1,tm+1,tr,pos,new_val);
            }
            t[v] = merge(t[2*v],t[2*v+1]);
        }
    }
    ll query(ll v,ll tl,ll tr,ll l,ll r)
    {
        if(l>r)   return 0;
        if(l==tl && r==tr)   return t[v];
        ll tm = (tl + tr)/2;
        return merge(query(v*2, tl, tm, l, min(r, tm)),query(v*2+1, tm+1, tr, max(l, tm+1), r));
    }
};